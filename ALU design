module full_adder(A,B,cin,sum,carry); 	  //full adder 
  input A,B;
  input cin;
  output sum; 
  output carry;
  
  assign sum   = ((A^B)^cin);			        //assign sum output
  assign carry = ((A^B)&cin)|(A&B);		    //assign carry output
  
endmodule

module full_adder_four(			
  input [3:0] A,B,						 	          //4 bit adder 
  input cin,								 
  output [3:0] sum,							          //4 bit output for sum 
  output carry);						
  
  wire [2:0] z;								            //3 wires to connect carry to each full adder 	
  
  full_adder fa0(.A(A[0]), .B(B[0]), .cin(cin), .sum(sum[0]),  .carry(z[0]));
  full_adder fa1(.A(A[1]), .B(B[1]), .cin(z[0]), .sum(sum[1]), .carry(z[1]));
  full_adder fa2(.A(A[2]), .B(B[2]), .cin(z[1]), .sum(sum[2]), .carry(z[2]));
  full_adder fa3(.A(A[3]), .B(B[3]), .cin(z[2]), .sum(sum[3]), .carry(carry));
  
endmodule 

module subtrac(A,B,cin,diff,borr);        //full subtrctor 
  input A,B;
  input cin;
  output diff; 
  output borr;
  
  assign borr = ((~(A^B))&cin)|(A&~B);    //assign borrow output 
  assign diff =((A^B)^cin);				        //assign difference output  

endmodule 

module four_bit_sub(
  input [3:0] A,B,
  input cin,
  output [3:0] diff,
  output [3:0] borr);
  
  wire [3:0] z1,z2,z3;
  
  
  subtrac fa0(.A(A[0]),.B(B[0]),.cin(cin),.diff(diff[0]),.borr(z1));
  subtrac fa1(.A(A[1]),.B(B[1]),.cin(z1),.diff(diff[1]),.borr(z2));
  subtrac fa2(.A(A[2]),.B(B[2]),.cin(z2),.diff(diff[2]),.borr(z3));
  subtrac fa3(.A(A[3]),.B(B[3]),.cin(z3),.diff(diff[3]),.borr(borr));
                        
 endmodule          


module arithmetic_unit(A,B,cin,sum,carry,diff,borr,sel,out1);
  input [3:0] A,B;				          //arithmetic unit connect to 8:1 mux
  input [3:0] cin,borr,carry;
  input [2:0] sel;
  output [3:0] sum,diff;
  output reg [3:0] out1;
  wire [3:0] i0,i1,i2,i3,i4,i5,i6,i7;
  
  
  full_adder_four fa0(.A(A),.B(4'b0001),.cin(0),.sum(i0),.carry(carry));
  full_adder_four fa1(.A(4'b0001),.B(B),.cin(0),.sum(i1),.carry(carry));
  full_adder_four fa2(.A(A),.B(B),.cin(0),.sum(i2),.carry(carry));
  four_bit_sub fs0(.A(A),.B(B),.cin(0),.diff(i3),.borr(borr));
  full_adder_four fa3(.A(A),.B(B),.cin(1),.sum(i4),.carry(carry));
  four_bit_sub fs1(.A(0),.B(A),.cin(1),.diff(i5),.borr(borr));
  four_bit_sub fs2(.A(0),.B(B),.cin(1),.diff(i6),.borr(borr));
  full_adder_four fa4(.A(A),.B(A),.cin(1),.sum(i7),.carry(carry));
  
   
  always @ (sel or i0 or i1 or i2 or i3 or i4 or i5 or i6 or i7)
    begin 
      case(sel)
        3'b000 : out1 = i0; //Increment A by 1
        3'b001 : out1 = i1; //Increment B by 1
        3'b010 : out1 = i2; //Addition of A and B  
        3'b011 : out1 = i3; //Subtract B-A
        3'b100 : out1 = i4; //Addition of A and B with carry
        3'b101 : out1 = i5; //Decrement A by 1
        3'b110 : out1 = i6; //Decrement B by 1
        3'b111 : out1 = i7; //Add A two times and increment by one
        
        endcase
    end
endmodule 

module logicunit(A,B,j0,j1,j2,j3,j4,j5,j6,j7,sel1,out2); //logic unit to 8:1 mux
  input [3:0] A,B,j0,j1,j2,j3,j4,j5,j6,j7;
  input [2:0] sel1;
  output reg [3:0] out2;
  
  assign j0 = A&B; 			    //AND funtion
  assign j1 = A|B;			    //OR function
  assign j2 = ~(A^B);		    //XNOR function
  assign j3 = ~A;			      //Complement A
  assign j4 = ~B;			      //Complement B
  assign j5 = A<<4'b0001;	  //Shift Left 
  assign j6 = A^B;			    //XOR
  assign j7 = A>>4'b0001;	  //Shift right 
  
  always @ (sel1 or j0 or j1 or j2 or j3 or j4 or j5 or j6 or j7)
    begin 
      case(sel1)
        3'b000 : out2 = j0;
        3'b001 : out2 = j1;
        3'b010 : out2 = j2;
        3'b011 : out2 = j3;
        3'b100 : out2 = j4;
        3'b101 : out2 = j5;
        3'b110 : out2 = j6;
        3'b111 : out2 = j7;
        
        endcase
    end
endmodule 

module two_one_mux(A,B,sel,out1,sel1,out2,sel2,C,D,out3);
  input [3:0] A,B,C,D;
  input [2:0] sel,sel1;
  input sel2;
  output reg [3:0] out1, out2, out3;
  
  arithmetic_unit fa0(.A(A),.B(B),.sel(sel),.out1(C));
  logicunit fl0(.A(A),.B(B),.sel1(sel1),.out2(D));
  
  always @ (sel2 or C or D)
    begin 
      case(sel2)
        1'b0 : out3 = C;
        1'b1 : out3 = D;
        
      endcase 
    end
endmodule 
